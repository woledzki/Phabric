<?php

namespace Phabric\Datasource;
use Phabric\Datasource\IDatasource;

use Mockery as m;
use Behat;


/**
 * This file is part of the Phabric.
 * (c) Ben Waine <ben@ben-waine.co.uk>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

/**
 * Test class for Phabric.
 * Generated by PHPUnit on 2011-07-26 at 20:57:02.
 */
class DoctrineTest extends \PHPUnit_Framework_TestCase {

    /**
     * @var Phabric
     */
    protected $object;
    
    /**
     * @var \Doctrine\DBAL\Connection
     */
    protected $mockedConnection;


    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        
        $this->mockedConnection = m::mock('\Doctrine\DBAL\Connection');
        
        $this->object = new Doctrine($this->mockedConnection);
        //parent::setUp();
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        
        m::close();
        parent::tearDown();
    }
    
    public function testConstructorInitMappings()
    {
        $input = array(
            'event' => array(
                'tableName' => 't_event',
                'nameCol' => 'name',
                'primaryKey' => 'id'),
            'session' => array(
                'tableName' => 't_session',
                'nameCol' => 'name',
                'primaryKey' => 'id'),
            
        );
        
        $obj = new Doctrine($this->mockedConnection, $input);
        
        $this->assertEquals($input, $obj->getMappings());
    }

    public function testConstructorInitMappingsIncludingOptionalSequence()
    {
        $input = array(
            'event' => array(
                'tableName' => 't_event',
                'nameCol' => 'name',
                'primaryKey' => 'id',
                'sequence' => 't_event_id_seq'),
        );

        $obj = new Doctrine($this->mockedConnection, $input);
        $this->assertEquals($input, $obj->getMappings());
    }
    
    public function testGetMappingAfterAdd()
    {
        $this->object->addTableMapping('event', 't_event', 'id', 'name');
        
        $expected = array(
            'event' => array(
                'tableName' => 't_event',
                'primaryKey' => 'id',
                'nameCol' => 'name'
            )
        );
        
        $this->assertEquals($expected, $this->object->getMappings());
    }

    public function testGetMappingAfterSet()
    {
        $expected = array(
            'event' => array(
                'tableName' => 't_event',
                'primaryKey' => 'id',
                'nameCol' => 'name'
            )
        );
        
        $this->object->setTableMappings($expected);
        
        $this->assertEquals($expected, $this->object->getMappings());
    }

    public function testSetTableMappingsOvveridesExistingMappings()
    {
        
        $this->object->addTableMapping('session', 't_session', 'id', 'name');
        
        $expected = array(
            'event' => array(
                'tableName' => 't_event',
                'primaryKey' => 'id',
                'nameCol' => 'name'
            )
        );
        
        $this->object->setTableMappings($expected);
        
        $this->assertEquals($expected, $this->object->getMappings());
    }

    public function testAddMappingsAppendsNotOverrides()
    {
        $this->object->addTableMapping('event', 't_event', 'id', 'name');
        $this->object->addTableMapping('session', 't_session', 'id', 'name');
        
        $expected = array(
            'event' => array(
                'tableName' => 't_event',
                'primaryKey' => 'id',
                'nameCol' => 'name'
            ),
            'session' => array(
                'tableName' => 't_session',
                'primaryKey' => 'id',
                'nameCol' => 'name'
            )
        );
        
        $this->assertEquals($expected, $this->object->getMappings());
    }
    
    public function testInsert() 
    {
        
        $mEntity = m::mock('\Phabric\Entity');
        
        $mEntity->shouldReceive('getName')
                ->withNoArgs()
                ->andReturn('event');
        
        $values = array(
                        'name' => 'PHPNW',
                        'desc' => 'A Great Conf!',
                        'date' => '2011-10-08 12:00:00');
             
        $this->mockedConnection
              ->shouldReceive('insert')
              ->with('t_event', $values)
              ->andReturn(12);
        
        $this->mockedConnection
                ->shouldReceive('lastInsertId')
                ->with(null)
                ->andReturn(12);
        
        // Set the table mapping
        $this->object->addTableMapping('event', 't_event', 'id', 'name');
        
        
        $this->assertEquals(12, $this->object->insert($mEntity, $values));
    }

    public function testInsertWithSequence()
    {
        $mEntity = m::mock('\Phabric\Entity');
        
        $mEntity->shouldReceive('getName')
                ->withNoArgs()
                ->andReturn('event');
        
        $values = array(
                        'name' => 'PHPNW',
                        'desc' => 'A Great Conf!',
                        'date' => '2011-10-08 12:00:00');
             
        $this->mockedConnection
              ->shouldReceive('insert')
              ->with('t_event', $values)
              ->andReturn(12);
        
        $this->mockedConnection
                ->shouldReceive('lastInsertId')
                ->with('t_event_id_seq')
                ->andReturn(12);
        
        // Set the table mapping
        $this->object->addTableMapping('event', 't_event', 'id', 'name', 't_event_id_seq');
        
        
        $this->assertEquals(12, $this->object->insert($mEntity, $values));
    }
    
    /**
     * @expectedException RuntimeException
     */
    public function testInsertOnUnmappedTable()
    {
     $mEntity = m::mock('\Phabric\Entity');
        
        $mEntity->shouldReceive('getName')
                ->withNoArgs()
                ->andReturn('event');
        
        $values = array(
                        'name' => 'PHPNW',
                        'desc' => 'A Great Conf!',
                        'date' => '2011-10-08 12:00:00');
             
        $this->mockedConnection
              ->shouldReceive('insert')
              ->with('t_event', $values)
              ->andReturn(12);
        
        // No mapping added
        
        $this->assertEquals(12, $this->object->insert($mEntity, $values));   
    }
        
    /**
     * @expectedException RuntimeException
     */
    public function testInsertOnDataWithoutNameColumn()
    {
     $mEntity = m::mock('\Phabric\Entity');
        
        $mEntity->shouldReceive('getName')
                ->withNoArgs()
                ->andReturn('event');
        
        $values = array(
                        'desc' => 'A Great Conf!',
                        'date' => '2011-10-08 12:00:00');
             
        $this->mockedConnection
              ->shouldReceive('insert')
              ->with('t_event', $values)
              ->andReturn(12);
        
        $this->object->addTableMapping('event', 't_event', 'id', 'name');
        
        $this->assertEquals(12, $this->object->insert($mEntity, $values));          
    }
    
    public function testUpdate()
    {
        $mEntity = m::mock('\Phabric\Entity');
        
        $mEntity->shouldReceive('getName')
                ->withNoArgs()
                ->andReturn('event');
        
        $values = array(
                        'name' => 'PHPNW',
                        'desc' => 'A Great Conf!',
                        'date' => '2011-10-08 12:00:00');
        
        $this->mockedConnection
              ->shouldReceive('insert')
              ->with('t_event', $values)
              ->andReturn(12);
        
        $this->mockedConnection
                ->shouldReceive('lastInsertId')
                ->with(null)
                ->andReturn(12);
        
        $this->mockedConnection
              ->shouldReceive('update')
              ->with('t_event', $values, array('id' => 12))
              ;
        
        
        // Set the table mapping
        $this->object->addTableMapping('event', 't_event', 'id', 'name');
        
        $this->object->insert($mEntity, $values);
        $this->object->update($mEntity, $values);
    }
    
    /**
     * @expectedException RuntimeException
     */
    public function testUpdateOnDataWithoutNameColumn()
    {
        $mEntity = m::mock('\Phabric\Entity');
        
        $mEntity->shouldReceive('getName')
                ->withNoArgs()
                ->andReturn('event');
        
        $values = array(
                        'desc' => 'A Great Conf!',
                        'date' => '2011-10-08 12:00:00');
        
        $this->mockedConnection
              ->shouldReceive('insert')
              ->with('t_event', $values)
              ->andReturn(12);
        
        
        $this->mockedConnection
              ->shouldReceive('update')
              ->with('t_event', $values, array('id' => 12))
              ;
        
        
        // Set the table mapping
        $this->object->addTableMapping('event', 't_event', 'id', 'name');
        
        $this->object->insert($mEntity, $values);
        $this->object->update($mEntity, $values);
    
    }
    
    /**
     * @expectedException RuntimeException
     */
    public function testUpdateOnPreviouslyUnInsertedData()
    {
        $mEntity = m::mock('\Phabric\Entity');
        
        $mEntity->shouldReceive('getName')
                ->withNoArgs()
                ->andReturn('event');
        
        $values = array(
                        'name' => 'PHPNW',
                        'desc' => 'A Great Conf!',
                        'date' => '2011-10-08 12:00:00');
        
        $this->mockedConnection
              ->shouldReceive('insert')
              ->with('t_event', $values)
              ->andReturn(12);
        
        $this->mockedConnection
              ->shouldReceive('update')
              ->with('t_event', $values, array('id' => 12))
              ;
        
        
        // Set the table mapping
        $this->object->addTableMapping('event', 't_event', 'id', 'name');
        
        // No insert, just update
        $this->object->update($mEntity, $values);
    }
    
    public function testDelete()
    {
        
    }
   
    public function testResetInserts()
    {
        $mEntity = m::mock('\Phabric\Entity');
        
        $mEntity->shouldReceive('getName')
                ->withNoArgs()
                ->andReturn('event');
        
        $values = array(
                        'name' => 'PHPNW',
                        'desc' => 'A Great Conf!',
                        'date' => '2011-10-08 12:00:00');
                    
        $this->mockedConnection
              ->shouldReceive('insert')
              ->with('t_event', $values);
             
        $this->mockedConnection
                ->shouldReceive('lastInsertId')
                ->with(null)
                ->andReturn(12);
        
        $this->mockedConnection
                ->shouldReceive('delete')
                ->with('t_event', 12)
                ->andReturn(null);

                      
        // Set the table mapping
        $this->object->addTableMapping('event', 't_event', 'id', 'name');
        
        $this->object->insert($mEntity, $values);
        
        $this->object->reset();
        
    }
    
    public function testResetUpdates()
    {
        
    }
    
    public function testResetAnUpdatedUpdate()
    {
        
    }
    
    public function testResetCombinedInsertsAndUpdates()
    {
        
    }



}

