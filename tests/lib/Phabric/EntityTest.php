<?php

namespace Phabric;

use Mockery as m;
use Behat;

/**
 * This file is part of the Phabric.
 * (c) Ben Waine <ben@ben-waine.co.uk>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

/**
 * Test class for Phabric.
 * Generated by PHPUnit on 2011-07-26 at 20:57:02.
 */
class EntityTest extends \PHPUnit_Framework_TestCase {

    /**
     * @var Phabric
     */
    protected $object;
    protected $mockedConnection;
    protected $mockedBus;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->mockedConnection = m::mock('\Phabric\Datasource\IDatasource');

        $this->mockedConnection->shouldReceive('lastInsertId')
                ->andReturn(12);

        $this->mockedBus = m::mock('\Phabric\Phabric');
        $this->object = new \Phabric\Entity($this->mockedConnection, $this->mockedBus);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        m::close();
    }

    public function testInsertFromTable() {
        $tableData = array(
            array(
                'name' => 'PHPNW',
                'datetime' => '2011-10-08 09:00:00',
                'venue' => 'Ramada Hotel',
                'description' => 'A Great Conf!')
        );


        $tableNode = m::mock('Behat\Gherkin\Node\TableNode');
        $tableNode->shouldReceive('getHash')
                ->withNoArgs()
                ->andReturn($tableData)
                ->once();

        $expectedInsert = array('name' => 'PHPNW',
            'datetime' => '2011-10-08 09:00:00',
            'venue' => 'Ramada Hotel',
            'description' => 'A Great Conf!');

        $this->mockedConnection->shouldReceive('insert')
                ->with('\Phabric\Entity', $expectedInsert)
                ->once();

        $this->object->insertFromTable($tableNode);
    }

    public function testInsertFromTableWithNameTransformations() {


        $tableData = array(
            array(
                'Name' => 'PHPNW',
                'Date' => '2011-10-08 09:00:00',
                'Venue' => 'Ramada Hotel',
                'Desc' => 'A Great Conf!')
        );

        $tableNode = m::mock('Behat\Gherkin\Node\TableNode');
        $tableNode->shouldReceive('getHash')
                ->withNoArgs()
                ->andReturn($tableData)
                ->once();

        $expectedInsert = array('name' => 'PHPNW',
            'datetime' => '2011-10-08 09:00:00',
            'venue' => 'Ramada Hotel',
            'description' => 'A Great Conf!');

        $this->mockedConnection->shouldReceive('insert')
                ->with('\Phabric\Entity', $expectedInsert)
                ->once();


        $this->object->setNameTransformations(array('Date' => 'datetime',
            'Desc' => 'description'));

        $this->object->insertFromTable($tableNode);
    }

    public function testInsertFromTableWithNullDefaultNameTransformation() {


        $tableData = array(
            array(
                'Name' => 'PHPNW',
                'Date' => '2011-10-08 09:00:00',
                'Venue' => 'Ramada Hotel',
                'Desc' => 'A Great Conf!')
        );

        $tableNode = m::mock('Behat\Gherkin\Node\TableNode');
        $tableNode->shouldReceive('getHash')
                ->withNoArgs()
                ->andReturn($tableData)
                ->once();

        $expectedInsert = array('Name' => 'PHPNW',
            'DateTime' => '2011-10-08 09:00:00',
            'Venue' => 'Ramada Hotel',
            'Description' => 'A Great Conf!');

        $this->mockedConnection->shouldReceive('insert')
                ->with('\Phabric\Entity', $expectedInsert)
                ->once();


        $this->object->setDefaultNameTransformation(null);
        $this->object->setNameTransformations(array('Date' => 'DateTime',
            'Desc' => 'Description'));

        $this->object->insertFromTable($tableNode);
    }

    public function testInsertFromTableWithCallableDefaultNameTransformation() {


        $tableData = array(
            array(
                'Name' => 'PHPNW',
                'Date' => '2011-10-08 09:00:00',
                'Venue' => 'Ramada Hotel',
                'Desc' => 'A Great Conf!')
        );

        $tableNode = m::mock('Behat\Gherkin\Node\TableNode');
        $tableNode->shouldReceive('getHash')
                ->withNoArgs()
                ->andReturn($tableData)
                ->once();

        $expectedInsert = array('NAME' => 'PHPNW',
            'DateTime' => '2011-10-08 09:00:00',
            'VENUE' => 'Ramada Hotel',
            'Description' => 'A Great Conf!');

        $this->mockedConnection->shouldReceive('insert')
                ->with('\Phabric\Entity', $expectedInsert)
                ->once();


        $this->object->setDefaultNameTransformation('strtoupper');
        $this->object->setNameTransformations(array('Date' => 'DateTime',
            'Desc' => 'Description'));

        $this->object->insertFromTable($tableNode);
    }

    public function testInsertFromTableWithNamedDefaultDataTransformation() {


        $tableData = array(
            array(
                'Name' => 'PHPNW',
                'Date' => '2011-10-08 09:00:00',
                'The Venue' => 'Ramada Hotel',
                'Desc' => 'A Great Conf!')
        );

        $tableNode = m::mock('Behat\Gherkin\Node\TableNode');
        $tableNode->shouldReceive('getHash')
                ->withNoArgs()
                ->andReturn($tableData)
                ->once();

        $expectedInsert = array('name' => 'PHPNW',
            'DateTime' => '2011-10-08 09:00:00',
            'the_venue' => 'Ramada Hotel',
            'Description' => 'A Great Conf!');

        $this->mockedConnection->shouldReceive('insert')
                ->with('\Phabric\Entity', $expectedInsert)
                ->once();

        $retFn = function($name) {
                // oh no, it's a snake...
                return strtolower(str_replace(' ', '_', $name));
                };

        $this->mockedBus->shouldReceive('getDataTransformation')
                ->with('SNAKE_CASE')
                ->twice()
                ->andReturn($retFn);

        $this->object->setDefaultNameTransformation('SNAKE_CASE');
        $this->object->setNameTransformations(array('Date' => 'DateTime',
            'Desc' => 'Description'));

        $this->object->insertFromTable($tableNode);
    }

    public function testInsertFromTableWithDefaults() {

        $tableData = array(
            array(
                'name' => 'PHPNW',
                'datetime' => '2011-10-08 09:00:00',
                'venue' => 'Ramada Hotel',
            )
        );

        $tableNode = m::mock('Behat\Gherkin\Node\TableNode');
        $tableNode->shouldReceive('getHash')
                ->withNoArgs()
                ->andReturn($tableData)
                ->once();

        $expectedInsert = array('name' => 'PHPNW',
            'datetime' => '2011-10-08 09:00:00',
            'venue' => 'Ramada Hotel',
            'description' => 'TEST DESCRIPTION');

        $this->mockedConnection->shouldReceive('insert')
                ->with('\Phabric\Entity', $expectedInsert)
                ->once();

        $this->object->setDefaults(array(
            'description' => 'TEST DESCRIPTION',
            'venue' => 'TEST VENUE'
        ));

        $this->object->insertFromTable($tableNode);
    }

    public function testInsertFromTableWithDataTransformations() {

        $tableData = array(
            array(
                'name' => 'PHPNW',
                'datetime' => '08/10/2011 09:00',
                'venue' => 'Ramada Hotel',
                'description' => 'A Great Conf!')
        );

        $tableNode = m::mock('Behat\Gherkin\Node\TableNode');

        $tableNode->shouldReceive('getHash')
                ->withNoArgs()
                ->andReturn($tableData)
                ->once();

        $expectedInsert = array('name' => 'PHPNW',
            'datetime' => '2011-10-08 09:00:00',
            'venue' => 'Ramada Hotel',
            'description' => 'A Great Conf!');

        $this->mockedConnection->shouldReceive('insert')
                ->with('\Phabric\Entity', $expectedInsert)
                ->once();

        $retFn = function($date) {
                    $date = \DateTime::createFromFormat('d/m/Y H:i', $date);
                    return $date->format('Y-m-d H:i:s');
                };

        $this->mockedBus->shouldReceive('getDataTransformation')
                ->with('UKTOMYSQLDATE')
                ->once()
                ->andReturn($retFn);


        $this->object->setDataTransformations(array('datetime' => 'UKTOMYSQLDATE'));

        $this->object->insertFromTable($tableNode);
    }

    public function testInsertFromTableWithMultipleFeaturesEnabled() {
        $tableData = array(
            array('Name', 'Date', 'Venue'),
            array('PHPNW', '08/10/2011 09:00', 'Ramada Hotel')
        );

        $tableData = array(
            array(
                'Name' => 'PHPNW',
                'Date' => '08/10/2011 09:00',
                'Venue' => 'Ramada Hotel'
            )
        );

        $tableNode = m::mock('Behat\Gherkin\Node\TableNode');
        $tableNode->shouldReceive('getHash')
                ->withNoArgs()
                ->andReturn($tableData)
                ->once();

        $expectedInsert = array('name' => 'PHPNW',
            'datetime' => '2011-10-08 09:00:00',
            'venue' => 'Ramada Hotel',
            'description' => 'TEST DESCRIPTION');

        $this->mockedConnection->shouldReceive('insert')
                ->with('\Phabric\Entity', $expectedInsert)
                ->once();

        $this->object->setNameTransformations(array('Date' => 'datetime'));

        $this->object->setDefaults(array(
            'description' => 'TEST DESCRIPTION',
            'venue' => 'TEST VENUE'
        ));

        $retFn = function($date) {
                    $date = \DateTime::createFromFormat('d/m/Y H:i', $date);
                    return $date->format('Y-m-d H:i:s');
                };

        $this->mockedBus->shouldReceive('getDataTransformation')
                ->with('UKTOMYSQLDATE')
                ->once()
                ->andReturn($retFn);

        $this->object->setDataTransformations(array('datetime' => 'UKTOMYSQLDATE'));

        $this->object->insertFromTable($tableNode);
    }

    public function testGetNamedItemId() {

        $tableData = array(
            array(
                'name' => 'PHPNW',
                'datetime' => '2011-10-08 09:00:00',
                'venue' => 'Ramada Hotel',
                'description' => 'A Great Conf!')
        );

        $tableNode = m::mock('Behat\Gherkin\Node\TableNode');

        $tableNode->shouldReceive('getHash')
                ->withNoArgs()
                ->andReturn($tableData)
                ->once();

        $expectedInsert = array('name' => 'PHPNW',
            'datetime' => '2011-10-08 09:00:00',
            'venue' => 'Ramada Hotel',
            'description' => 'A Great Conf!');

        $this->mockedConnection->shouldReceive('insert')
                ->with('\Phabric\Entity', $expectedInsert)
                ->once();
        
        $this->mockedConnection->shouldReceive('getNamedItemId')
                ->with('\Phabric\Entity', 'PHPNW')
                ->andReturn(12);

        $this->object->insertFromTable($tableNode);

        $this->assertInternalType('integer', $this->object->getNamedItemId('PHPNW'));
        $this->assertEquals(12, $this->object->getNamedItemId('PHPNW'));
    }

    public function testUpdateFromTable() {
        $inTableData = array(
            array(
                'name' => 'PHPNW',
                'datetime' => '2011-10-08 09:00:00',
                'venue' => 'Ramada Hotel',
                'description' => 'A Great Conf!')
        );

        $update = array(
            'name' => 'PHPNW',
            'datetime' => '2011-10-08 10:00:00',
            'venue' => 'Ramada Hotel MAN',
            'description' => 'A Great Conf!');

        $upTableData = array(
            $update
        );

        $tableNode = m::mock('Behat\Gherkin\Node\TableNode');
        $tableNode->shouldReceive('getHash')
                ->withNoArgs()
                ->andReturn($inTableData, $upTableData)
                ->twice();


        $this->mockedConnection->shouldReceive('insert')
                ->withAnyArgs()
                ->once();

        $this->mockedConnection->shouldReceive('update')
                ->with("\Phabric\Entity", $update)
                ->once();

        $this->object->insertFromTable($tableNode);
        $this->object->updateFromTable($tableNode);
    }

    /**
     * @expectedException InvalidArgumentException
     */
    public function testSetOptionWithInvalidName()
    {
        $this->object->setOption('davedavedave', 123456);
    }

    /**
     * @expectedException InvalidArgumentException
     */
    public function testGetOptionWithInvalidName()
    {
        $this->object->getOption('davedavedave');
    }


}

?>
