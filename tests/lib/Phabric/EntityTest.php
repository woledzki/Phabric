<?php

namespace Phabric;

use Mockery as m;
use Behat;

/**
 * This file is part of the Phabric.
 * (c) Ben Waine <ben@ben-waine.co.uk>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

/**
 * Test class for Phabric.
 * Generated by PHPUnit on 2011-07-26 at 20:57:02.
 */
class EntitiyTest extends \PHPUnit_Framework_TestCase {

    /**
     * @var Phabric
     */
    protected $object;
    protected $mockedConnection;
    protected $mockedBus;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->mockedConnection = m::mock('\Doctrine\DBAL\Connection');

        $this->mockedConnection->shouldReceive('lastInsertId')
                ->andReturn(12);

        $this->mockedBus = m::mock('\Phabric\Phabric');
        $this->object = new \Phabric\Entity($this->mockedConnection, $this->mockedBus);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        m::close();
    }

    public function testInsert() {
        $tableData = array(
            array(
                'name' => 'PHPNW',
                'datetime' => '2011-10-08 09:00:00',
                'venue' => 'Ramada Hotel',
                'description' => 'A Great Conf!')
        );

        $expectedInsert = array('name' => 'PHPNW',
            'datetime' => '2011-10-08 09:00:00',
            'venue' => 'Ramada Hotel',
            'description' => 'A Great Conf!');

        $this->mockedConnection->shouldReceive('insert')
                ->with('Event', $expectedInsert)
                ->once();

        $this->object->setTableName('Event');

        $this->object->insert($tableData);
    }

    public function testInsertWithNameTransformations() {

        $tableData = array(
            array(
                'Name' => 'PHPNW',
                'Date' => '2011-10-08 09:00:00',
                'Venue' => 'Ramada Hotel',
                'Desc' => 'A Great Conf!')
        );

        $expectedInsert = array('name' => 'PHPNW',
            'datetime' => '2011-10-08 09:00:00',
            'venue' => 'Ramada Hotel',
            'description' => 'A Great Conf!');

        $this->mockedConnection->shouldReceive('insert')
                ->with('Event', $expectedInsert)
                ->once();

        $this->object->setTableName('Event');
        $this->object->setNameTransformations(array('Date' => 'datetime',
            'Desc' => 'description'));

        $this->object->insert($tableData);
    }

    public function testInsertWithDefaults() {

        $tableData = array(
            array(
                'name' => 'PHPNW',
                'datetime' => '2011-10-08 09:00:00',
                'venue' => 'Ramada Hotel',
            )
        );

        $expectedInsert = array('name' => 'PHPNW',
            'datetime' => '2011-10-08 09:00:00',
            'venue' => 'Ramada Hotel',
            'description' => 'TEST DESCRIPTION');

        $this->mockedConnection->shouldReceive('insert')
                ->with('Event', $expectedInsert)
                ->once();

        $this->object->setTableName('Event');
        $this->object->setDefaults(array(
            'description' => 'TEST DESCRIPTION',
            'venue' => 'TEST VENUE'
        ));

        $this->object->insert($tableData);
    }

    public function testInsertWithDataTransformations() {

        $tableData = array(
            array(
                'name' => 'PHPNW',
                'datetime' => '08/10/2011 09:00',
                'venue' => 'Ramada Hotel',
                'description' => 'A Great Conf!')
        );

        $expectedInsert = array('name' => 'PHPNW',
            'datetime' => '2011-10-08 09:00:00',
            'venue' => 'Ramada Hotel',
            'description' => 'A Great Conf!');

        $this->mockedConnection->shouldReceive('insert')
                ->with('Event', $expectedInsert)
                ->once();

        $this->object->setTableName('Event');

        $retFn = function($date) {
                    $date = \DateTime::createFromFormat('d/m/Y H:i', $date);
                    return $date->format('Y-m-d H:i:s');
                };

        $this->mockedBus->shouldReceive('getDataTransformation')
                ->with('UKTOMYSQLDATE')
                ->once()
                ->andReturn($retFn);


        $this->object->setDataTransformations(array('datetime' => 'UKTOMYSQLDATE'));

        $this->object->insert($tableData);
    }

    public function testInsertWithMultipleFeaturesEnabled() {
        $tableData = array(
            array(
                'Name' => 'PHPNW',
                'Date' => '08/10/2011 09:00',
                'Venue' => 'Ramada Hotel'
            )
        );

        $expectedInsert = array('name' => 'PHPNW',
            'datetime' => '2011-10-08 09:00:00',
            'venue' => 'Ramada Hotel',
            'description' => 'TEST DESCRIPTION');

        $this->mockedConnection->shouldReceive('insert')
                ->with('Event', $expectedInsert)
                ->once();

        $this->object->setTableName('Event');
        $this->object->setNameTransformations(array('Date' => 'datetime'));

        $this->object->setDefaults(array(
            'description' => 'TEST DESCRIPTION',
            'venue' => 'TEST VENUE'
        ));

        $retFn = function($date) {
                    $date = \DateTime::createFromFormat('d/m/Y H:i', $date);
                    return $date->format('Y-m-d H:i:s');
                };

        $this->mockedBus->shouldReceive('getDataTransformation')
                ->with('UKTOMYSQLDATE')
                ->once()
                ->andReturn($retFn);

        $this->object->setDataTransformations(array('datetime' => 'UKTOMYSQLDATE'));

        $this->object->insert($tableData);
    }

    public function testGetNamedItemId() {

        $tableData = array(
            array(
                'name' => 'PHPNW',
                'datetime' => '2011-10-08 09:00:00',
                'venue' => 'Ramada Hotel',
                'description' => 'A Great Conf!')
        );

        $expectedInsert = array('name' => 'PHPNW',
            'datetime' => '2011-10-08 09:00:00',
            'venue' => 'Ramada Hotel',
            'description' => 'A Great Conf!');

        $this->mockedConnection->shouldReceive('insert')
                ->with('Event', $expectedInsert)
                ->once();

        $this->object->setTableName('Event');

        $this->object->insert($tableData);

        $this->assertInternalType('integer', $this->object->getNamedItemId('PHPNW'));
        $this->assertEquals(12, $this->object->getNamedItemId('PHPNW'));
    }

    public function testUpdate() {
        $inTableData = array(
            array(
                'name' => 'PHPNW',
                'datetime' => '2011-10-08 09:00:00',
                'venue' => 'Ramada Hotel',
                'description' => 'A Great Conf!')
        );

        $update = array(
            'name' => 'PHPNW',
            'datetime' => '2011-10-08 10:00:00',
            'venue' => 'Ramada Hotel MAN',
            'description' => 'A Great Conf!');

        $upTableData = array(
            $update
        );

        $this->mockedConnection->shouldReceive('insert')
                ->withAnyArgs()
                ->once();

        $this->mockedConnection->shouldReceive('update')
                ->with("event", $update, array("id" => 12))
                ->once();


        $this->object->setTableName('event');
        $this->object->setPkCol('id');

        $this->object->insert($inTableData);
        $this->object->update($upTableData);
    }

    /**
     * @expectedException RuntimeException
     */
    public function testUpdateWithNoPkColSet()
    {
        $this->object->setTableName('event');

        $update = array(
            'name' => 'PHPNW',
            'datetime' => '2011-10-08 10:00:00',
            'venue' => 'Ramada Hotel MAN',
            'description' => 'A Great Conf!');

        $upTableData = array(
            $update
        );

        $this->object->update($upTableData);
    }

    /**
     * @expectedException RuntimeException
     */
    public function testUpdateThrowsExceptionWhenNoPrevInsert() {

        $this->object->setTableName('event');
        $this->object->setPkCol('id');

        $update = array(
            'name' => 'PHPNW',
            'datetime' => '2011-10-08 10:00:00',
            'venue' => 'Ramada Hotel MAN',
            'description' => 'A Great Conf!');

        $upTableData = array(
            $update
        );

        $this->object->update($upTableData);
    }

}

?>
